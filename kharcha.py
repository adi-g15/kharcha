#!/usr/bin/env python3

import argparse
import sys
import json
from pathlib import Path

from backends.hdfc import hdfc_convert_to_ir
from backends.sbi import sbi_convert_to_ir
from analyser import kharcha_analysis
from process_ir import assign_types, save_data_in_file

parser = argparse.ArgumentParser(description="Statement Analyzer")

parser.add_argument("input_file",
                    nargs="?",
                    help="Input file (CSV, PDF, or JSON)")
parser.add_argument("--detailed",
                    action="store_true",
                    help="Enable detailed report")
parser.add_argument("--sbi",
                    action="store_true",
                    help="Input is SBI Statement, generated by browser.js (JSON)")
parser.add_argument("--hdfc",
                    action="store_true",
                    help="Input is HDFC Statement (CSV)")
parser.add_argument("--amazon",
                    action="store_true",
                    help="Input is Amazon Pay transactions, generated by browser-amazon-pay.js (JSON)")
parser.add_argument("--json",
                    type=str,
                    help="Provide a JSON file for analysis, should be in IR form")
parser.add_argument("--use-ai",
                    action="store_true",
                    help="Use AI to label the data (default: off)")

args = parser.parse_args()

# SBI and Amazon statements are being generated using browser scripts,
# which already generates in the IR format
if args.sbi or args.amazon:
    # treat the input as if passed to '--json'
    args.json = args.input_file

if not (args.hdfc or args.json):
    print("One of '--sbi'/'--hdfc'/'--amazon'/'--json' is required", file=sys.stderr)
    sys.exit(1)

use_ai = args.use_ai

# STAGE 0 - Input (JSON or any filepath passed without option)
input_file = args.json or args.input_file

if not input_file:
    print("Please pass a statement's filename", file=sys.stderr)
    sys.exit(1)

# STAGE 1 - Convert to JSON (our IR) */
# 
# Every backend should give us data in our IR
# (Intermediate Representation), which is an array of
# JSON objects with these keys at minimum:
# 
# {
#    date: String,
#    text: String,
#    debit: Number,
#    credit: Number,
#  ... any other keys/data, like 'balance'/'note' is also okay but not required
#    }
#
stage0_output = Path(input_file).read_text()

stage1_input = stage0_output
if args.json:
    stage1_output = json.loads(stage1_input)
elif args.hdfc:
    stage1_output = hdfc_convert_to_ir(stage1_input)
elif args.sbi:
    stage1_output = sbi_convert_to_ir(stage1_input)

# STAGE 2 - Assign Types
stage2_input = stage1_output
stage2_output = assign_types(stage2_input, use_ai)
save_data_in_file(stage2_output)

# Stage 3 - Analysis
kharcha_analysis(stage2_output, args.detailed)

